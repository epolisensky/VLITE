"""pybdsf_source.py defines the DetectedSource object class
and contains the function read_catalog which reads in a source 
list text file of the kind generated by PyBDSF's write_catalog() 
function and stores each line (source) in a list of objects 
defined by the class DetectedSource."""


import sys
import os


class DetectedSource(object):
    """This is basically just a convenience class created
    to allow consistent naming and access of properties of
    sources detected by PyBDSF across all data input types 
    (i.e. inside from a bdsf.process_image output object or 
    outside from a database table or text file)."""
    def __init__(self):
        self.src_id = None
        self.isl_id= None
        self.image_id = None
        self.ra = None
        self.e_ra = None
        self.dec = None
        self.e_dec = None
        self.total_flux = None
        self.e_total_flux = None
        self.peak_flux = None
        self.e_peak_flux = None
        self.ra_max = None
        self.e_ra_max = None
        self.dec_max = None
        self.e_dec_max = None
        self.maj = None
        self.e_maj = None
        self.min = None
        self.e_min = None
        self.pa = None
        self.e_pa = None
        self.dc_maj = None
        self.e_dc_maj = None
        self.dc_min = None
        self.e_dc_min = None
        self.dc_pa = None
        self.e_dc_pa = None
        self.total_flux_isl = None
        self.total_flux_islE = None
        self.rms_isl = None
        self.mean_isl = None
        self.resid_rms = None
        self.resid_mean = None
        self.code = None
        self.catalog_id = None
        self.match_id = None
        self.min_deRuiter = None
        #self.sig = None
	#self.alpha = None
	#self.phi = None


    def cast(self, origsrc):
        """Attributes of a bdsf.gaul2srl.Source object
        output from bdsf.process_image are 'cast' to define
        attributes of a DetectedSource object."""
        self.src_id = origsrc.source_id
        self.isl_id= origsrc.island_id
        self.ra = origsrc.posn_sky_centroid[0] # deg
        self.e_ra = origsrc.posn_sky_centroidE[0] # deg
        self.dec = origsrc.posn_sky_centroid[1] # deg
        self.e_dec = origsrc.posn_sky_centroidE[1] # deg
        self.total_flux = origsrc.total_flux * 1000. # mJy
        self.e_total_flux = origsrc.total_fluxE * 1000. # mJy
        self.peak_flux = origsrc.peak_flux_centroid * 1000. # mJy/beam
        self.e_peak_flux = origsrc.peak_flux_centroidE * 1000. # mJy/beam
        self.ra_max = origsrc.posn_sky_max[0] # deg
        self.e_ra_max = origsrc.posn_sky_maxE[0] # deg
        self.dec_max = origsrc.posn_sky_max[1] # deg
        self.e_dec_max = origsrc.posn_sky_maxE[1] # deg
        self.maj = origsrc.size_sky[0] * 3600. # arcsec
        self.e_maj = origsrc.size_skyE[0] * 3600. # arcsec
        self.min = origsrc.size_sky[1] * 3600. # arcsec
        self.e_min = origsrc.size_skyE[1] * 3600. # arcsec
        self.pa = origsrc.size_sky[2] # deg
        self.e_pa = origsrc.size_skyE[2] # deg
        self.dc_maj = origsrc.deconv_size_sky[0] * 3600. # deconvolved
        self.e_dc_maj = origsrc.deconv_size_skyE[0] * 3600.
        self.dc_min = origsrc.deconv_size_sky[1] * 3600.
        self.e_dc_min = origsrc.deconv_size_skyE[1] * 3600.
        self.dc_pa = origsrc.deconv_size_sky[2]
        self.e_dc_pa = origsrc.deconv_size_skyE[2]
        self.total_flux_isl = origsrc.total_flux_isl * 1000. # mJy
        self.total_flux_islE = origsrc.total_flux_islE * 1000. # mJy
        self.rms_isl = origsrc.rms_isl * 1000. # mJy/beam
        self.mean_isl = origsrc.mean_isl * 1000. # mJy/beam
        self.resid_rms = origsrc.gresid_rms * 1000. # mJy/beam
        self.resid_mean = origsrc.gresid_mean * 1000. # mJy/beam
        self.code = origsrc.code
        #self.sig = self.peak_flux / self.rms_isl


def read_catalog(fname):
    """Generates a list of DetectedSource objects by reading in the
    source list text file generated by PyBDSF."""
    if(os.path.exists(fname) == 0):
        print 'ERROR: no such file %s\n' % fname
        sys.exit(0)
    fin = open(fname, 'r')
    # skip first 6 lines, they are header
    for i in range(6):
        line = fin.readline()
        if not line:
            print 'ERROR reading file header! %s\n' % fname
            sys.exit(0) 
    # initialize list for sources:
    sources = []
    # read file:
    while 1:
        # read source data line
        line = fin.readline()
        # check if at end of file
        if not line: break
        # or if line is blank this is an odd file where the
        # table repeats, break! 
        if not line.strip(): break
        # passed checks, proceed
        # append a pybdsf_source object to sources list:
        sources.append(DetectedSource())
        # split data line and append to sources list
        line = line.split()
        sources[-1].src_id = line[0]
        sources[-1].isl_id = line[1]
        sources[-1].ra = float(line[2]) # deg
        sources[-1].e_ra = float(line[3]) # deg
        sources[-1].dec = float(line[4]) # deg
        sources[-1].e_dec = float(line[5]) # deg
        sources[-1].total_flux = float(line[6]) * 1000. # integrated flux in mJy
        sources[-1].e_total_flux = float(line[7]) * 1000. # mJy
        sources[-1].peak_flux = float(line[8]) * 1000. # peak flux in mJy/beam
        sources[-1].e_peak_flux = float(line[9]) * 1000. # mJy/beam
        sources[-1].ra_max = float(line[10]) # RA in deg
        sources[-1].e_ra_max = float(line[11]) # deg
        sources[-1].dec_max = float(line[12]) # Dec in deg
        sources[-1].e_dec_max = float(line[13]) # deg
        sources[-1].maj = float(line[14]) * 3600. # arcsec
        sources[-1].e_maj = float(line[15]) * 3600. # arcsec
        sources[-1].min = float(line[16]) * 3600. # arcsec
        sources[-1].e_min = float(line[17]) * 3600. # arcsec
        sources[-1].pa = float(line[18]) # deg
        sources[-1].e_pa = float(line[19]) # deg
        sources[-1].dc_maj = float(line[26]) * 3600. # arcsec
        sources[-1].e_dc_maj = float(line[27]) * 3600. # arcsec
        sources[-1].dc_min = float(line[28]) * 3600. # arcsec
        sources[-1].e_dc_min = float(line[29]) * 3600. # arcsec
        sources[-1].dc_pa = float(line[30]) # deg
        sources[-1].e_dc_pa = float(line[31]) # deg
        sources[-1].total_flux_isl = float(line[38]) * 1000. # mJy
        sources[-1].total_flux_islE = float(line[39]) * 1000. # mJy
        sources[-1].rms_isl = float(line[40]) * 1000. # mJy/beam
        sources[-1].mean_isl = float(line[41]) * 1000. # mJy/beam
        sources[-1].resid_rms = float(line[42]) * 1000. # mJy/beam
        sources[-1].resid_mean = float(line[43]) * 1000. # mJy/beam
        sources[-1].code = line[44] # 'S', 'C', or 'M'
        #if float(line[40]) > 0.0000009:
            #sources[-1].sig = sources[-1].peak_flux / sources[-1].rms_isl
            # sigma of detection = Peak/islRMS
        #else:
            #sources[-1].sig = (0.0)
    fin.close()
    return sources
