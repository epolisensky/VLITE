"""readPyBDSFcat.py reads in a source list text file of 
the kind generated by PyBDSF's write_catalog() function
and stores each line (source) in a list of objects defined
by the class pybdsf_source()."""


import sys
import os


class pybdsf_source(object):
    """Stores all the stuff from the source catalog that PyBDSF
    spits out for each image."""
    def __init__(self):
        self.srcID = ''
        self.islID = ''
        self.RA = -99.9 # deg
        self.dRA = -99.9 # deg
        self.Dec = -99.9 # deg
        self.dDec = -99.9 # deg
        self.Total = -99.9 # Jy --> gets converted to mJy in database
        self.dTotal = -99.9 # Jy --> gets converted to mJy in database
        self.Peak = -99.9 # Jy/beam --> gets converted to mJy/bm in database
        self.dPeak = -99.9 # Jy/beam --> gets converted to mJy/bm in database
        self.RAmax = -99.9 # deg
        self.dRAmax = -99.9 # deg
        self.Decmax = -99.9 # deg
        self.dDecmax = -99.9 # deg
        self.BMAJ = -99.9 # deg --> gets converted to arcsec in database
        self.dBMAJ = -99.9 # deg --> gets converted to arcsec in database
        self.BMIN = -99.9 # deg --> gets converted to arcsec in database
        self.dBMIN = -99.9 # deg --> gets converted to arcsec in database
        self.PA = -999.9 # deg
        self.dPA = -99.9 # deg
        self.BMAJimg = -99.9 # same as above in image plane
        self.dBMAJimg = -99.9
        self.BMINimg = -99.9
        self.dBMINimg = -99.9
        self.PAimg = -999.9
        self.dPAimg = -99.9
        self.BMAJDC = -99.9 # deconvolved
        self.dBMAJDC = -99.9
        self.BMINDC = -99.9
        self.dBMINDC = -99.9
        self.PADC = -999.9
        self.dPADC = -99.9
        self.BMAJDCimg = -99.9 # deconvolved image plane
        self.dBMAJDCimg = -99.9
        self.BMINDCimg = -99.9
        self.dBMINDCimg = -99.9
        self.PADCimg = -999.9
        self.dPADCimg = -99.9
        self.islTotal = -99.9 # Jy --> gets converted to mJy in database
        self.dislTotal = -99.9 # Jy --> gets converted to mJy in database
        self.islRMS = -99.9 # Jy/beam --> gets converted to mJy/bm in database
        self.islMEAN = -99.9 # Jy/beam --> gets converted to mJy/bm in database
        self.RRMS = -99.9 # Jy/beam --> gets converted to mJy/bm in database
        self.RMEAN = -99.9 # Jy/beam --> gets converted to mJy/bm in database
        self.SCode = ''
        self.sig = -99.9
	self.alpha = -99.9
	self.phi = -99.9


def read_catalog(fname):
    """Generates a list of pybdsf_source objects by reading in the
    source list text file generated by PyBDSF."""
    if(os.path.exists(fname) == 0):
        print 'ERROR: no such file %s\n' % fname
        sys.exit(0)
    fin = open(fname, 'r')
    # skip first 6 lines, they are header
    for i in range(6):
        line = fin.readline()
        if not line:
            print 'ERROR reading file header! %s\n' % fname
            sys.exit(0) 
    # initialize list for sources:
    sources = []
    # read file:
    while 1:
        # read source data line
        line = fin.readline()
        # check if at end of file
        if not line: break
        # or if line is blank this is an odd file where the
        # table repeats, break! 
        if not line.strip(): break
        # passed checks, proceed
        # append a pybdsf_source object to sources list:
        sources.append(pybdsf_source())
        # split data line and append to sources list
        line = line.split()
        sources[-1].srcID = line[0]
        sources[-1].islID = line[1]
        sources[-1].RA = float(line[2]) # RA in deg
        sources[-1].dRA = float(line[3]) # deg
        sources[-1].Dec = float(line[4]) # Dec in deg
        sources[-1].dDec = float(line[5]) # deg
        sources[-1].Total = float(line[6]) # integrated flux in Jy
        sources[-1].dTotal = float(line[7]) # Jy
        sources[-1].Peak = float(line[8]) # peak flux in Jy/beam
        sources[-1].dPeak = float(line[9]) # Jy/beam
        sources[-1].RAmax = float(line[10]) # RA in deg
        sources[-1].dRAmax = float(line[11]) # deg
        sources[-1].Decmax = float(line[12]) # Dec in deg
        sources[-1].dDecmax = float(line[13]) # deg
        sources[-1].BMAJ = float(line[14]) # deg
        sources[-1].dBMAJ = float(line[15]) # deg
        sources[-1].BMIN = float(line[16]) # deg
        sources[-1].dBMIN = float(line[17]) # deg
        sources[-1].PA = float(line[18]) # deg
        sources[-1].dPA = float(line[19]) # deg
        sources[-1].BMAJimg = float(line[20]) # deg
        sources[-1].dBMAJimg = float(line[21]) # deg
        sources[-1].BMINimg = float(line[22]) # deg
        sources[-1].dBMINimg = float(line[23]) # deg
        sources[-1].PAimg = float(line[24]) # deg
        sources[-1].dPAimg = float(line[25]) # deg
        sources[-1].BMAJDC = float(line[26]) # deg
        sources[-1].dBMAJDC = float(line[27]) # deg
        sources[-1].BMINDC = float(line[28]) # deg
        sources[-1].dBMINDC = float(line[29]) # deg
        sources[-1].PADC = float(line[30]) # deg
        sources[-1].dPADC = float(line[31]) # deg
        sources[-1].BMAJDcimg = float(line[32]) # deg
        sources[-1].dBMAJDcimg = float(line[33]) # deg
        sources[-1].BMINDcimg = float(line[34]) # deg
        sources[-1].dBMINDCimg = float(line[35]) # deg
        sources[-1].PADcimg = float(line[36]) # deg
        sources[-1].dPADCimg = float(line[37]) # deg
        sources[-1].islTotal = float(line[38]) # Jy
        sources[-1].dislTotal = float(line[39]) # Jy
        sources[-1].islRMS = float(line[40]) # Jy/beam
        sources[-1].islMEAN = float(line[41]) # Jy/beam
        sources[-1].RRMS = float(line[42]) # Jy/beam
        sources[-1].RMEAN = float(line[43]) # Jy/beam
        sources[-1].SCode = line[44] # 'S', 'C', or 'M'
        if float(line[40]) > 0.0000009:
            sources[-1].sig = sources[-1].Peak / sources[-1].islRMS
            # sigma of detection = Peak/islRMS
        else:
            sources[-1].sig = (0.0)
    fin.close()
    return sources
